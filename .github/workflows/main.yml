name: Test, Build and Deploy

on: push

jobs:
  test:
    runs-on: ubuntu-22.04
    env:
      # variables for our front-end tests, see client/src/config.ts
      VITE_API_ORIGIN: http://localhost:3000
      VITE_API_PATH: /api/v1/trpc
      TOKEN_KEY: ${{ secrets.TOKEN_KEY }}
    services:
      # spin up a database for tests
      postgres:
        image: postgres:16.1-alpine
        env:
          POSTGRES_USER: turing
          POSTGRES_PASSWORD: turing
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check server
        run: npm run typecheck -w=server

      - name: Type check client
        run: npm run typecheck -w=client

      - name: Lint server
        run: npm run lint -w=server

      - name: Lint client
        run: npm run lint -w=client

      - name: Test server
        run: npm run test -w=server

      - name: Test client (unit)
        run: npm run test:unit -w=client

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Start server for E2E tests
        run: npm run dev -w=server &
        env:
          DB_USER: turing
          DB_PASSWORD: turing
          DB_NAME: testdb
          DB_HOST: localhost
          PORT: 3000

      - name: Build front end for E2E tests
        run: npm run build -w=client

      - name: Wait for server to startup
        uses: Jtalk/url-health-check-action@v4
        with:
          max-attempts: 5
          retry-delay: 5s
          url: ${{ env.VITE_API_ORIGIN }}/api/health

      - name: Test client E2E
        run: npm run test:e2e -w=client

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: client/playwright-report/
          retention-days: 7

  build-deploy:
    needs: test
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    env:
      API_ORIGIN: ${{ vars.API_ORIGIN }}
      API_PATH: /api/v1/trpc
      CLIENT_IMAGE_TAG: client-${{ github.sha }}
      SERVER_IMAGE_TAG: server-${{ github.sha }}
    steps:
     - name: 'Checkout'
       uses: 'actions/checkout@v4'

     - name: 'Google auth'
       id: 'auth'
       uses: 'google-github-actions/auth@v1'
       with:
         workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
         service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          project_id: '${{ env.PROJECT_ID }}'

     - name: 'Docker auth'
        run: |-
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: 'Build and push container'
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP }}/${{ env.APP }}:${{ github.sha }}" ./app
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.APP }}/${{ env.APP }}:${{ github.sha }}"
